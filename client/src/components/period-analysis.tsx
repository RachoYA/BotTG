import { useState, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, Calendar, MessageSquare, CheckCircle, AlertTriangle, Clock, AlertCircle, Search, FileText } from "lucide-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";

export default function PeriodAnalysis() {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [selectedChatId, setSelectedChatId] = useState("");
  const [chatSearch, setChatSearch] = useState("");
  const [analysisResult, setAnalysisResult] = useState<any>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Get chats for selection
  const { data: chats = [] } = useQuery({
    queryKey: ["/api/chats"],
    queryFn: () => fetch("/api/chats").then(res => res.json())
  });

  // Filter chats based on search
  const filteredChats = useMemo(() => {
    return chats.filter((chat: any) => 
      chat.title.toLowerCase().includes(chatSearch.toLowerCase())
    );
  }, [chats, chatSearch]);

  const analyzePeriodMutation = useMutation({
    mutationFn: async (data: { startDate: string; endDate: string; chatId?: string }) => {
      const response = await fetch("/api/conversation/analyze-period", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞");
      return response.json();
    },
    onSuccess: (data) => {
      setAnalysisResult(data);
      toast({
        title: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
      });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      queryClient.invalidateQueries({ queryKey: ["/api/period-analysis/recent"] });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setStartDate("");
      setEndDate("");
      setSelectedChatId("");
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
        description: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä–∏–æ–¥–∞",
        variant: "destructive"
      });
    }
  });

  // Daily summary mutation
  const dailySummaryMutation = useMutation({
    mutationFn: async (date: string) => {
      const response = await fetch("/api/summary/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ date })
      });
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏");
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–°–≤–æ–¥–∫–∞ –¥–Ω—è —Å–æ–∑–¥–∞–Ω–∞",
        description: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
      });
      queryClient.invalidateQueries({ queryKey: ["/api/summary/latest"] });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏",
        description: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–Ω—è",
        variant: "destructive"
      });
    }
  });

  const handleGenerateDailySummary = () => {
    const today = new Date().toISOString().split('T')[0];
    dailySummaryMutation.mutate(today);
  };

  const handleStartAnalysis = () => {
    if (!startDate || !endDate) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞",
        variant: "destructive"
      });
      return;
    }

    if (!selectedChatId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        variant: "destructive"
      });
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const startDateTime = new Date(startDate);
    startDateTime.setHours(0, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è
    
    const endDateTime = new Date(endDate);
    endDateTime.setHours(23, 59, 59, 999); // –ö–æ–Ω–µ—Ü –¥–Ω—è

    analyzePeriodMutation.mutate({
      startDate: startDateTime.toISOString(),
      endDate: endDateTime.toISOString(),
      chatId: selectedChatId
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
          </CardTitle>
          <CardDescription>
            –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –≤—ã—è–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="start-date">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</Label>
              <Input
                id="start-date"
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="end-date">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</Label>
              <Input
                id="end-date"
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="chat-select">–ß–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</Label>
            
            <Select value={selectedChatId} onValueChange={setSelectedChatId}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" />
              </SelectTrigger>
              <SelectContent>
                <div className="p-2 border-b">
                  <div className="relative">
                    <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤..."
                      value={chatSearch}
                      onChange={(e) => setChatSearch(e.target.value)}
                      className="pl-10 h-8"
                    />
                  </div>
                </div>
                <SelectItem value="all">üîÑ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—ã)</SelectItem>
                <div className="border-t my-1"></div>
                {filteredChats.map((chat: any) => (
                  <SelectItem key={chat.id} value={chat.chatId}>
                    {chat.type === 'private' ? 'üë§' : 'üë•'} {chat.title}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <Button 
              onClick={handleStartAnalysis}
              disabled={analyzePeriodMutation.isPending}
              className="w-full"
            >
              {analyzePeriodMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏...
                </>
              ) : (
                <>
                  <MessageSquare className="mr-2 h-4 w-4" />
                  –ù–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                </>
              )}
            </Button>

            <Button 
              onClick={handleGenerateDailySummary}
              disabled={dailySummaryMutation.isPending}
              variant="outline"
              className="w-full"
            >
              {dailySummaryMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ–¥–∫–∞...
                </>
              ) : (
                <>
                  <FileText className="mr-2 h-4 w-4" />
                  –°–≤–æ–¥–∫–∞ –¥–Ω—è
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Analysis Results */}
      {analysisResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-600" />
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {/* Summary */}
              {analysisResult.analysis?.summary && (
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-semibold text-blue-900 mb-2">–û–±—â–µ–µ —Ä–µ–∑—é–º–µ</h4>
                  <p className="text-blue-800">{analysisResult.analysis.summary}</p>
                </div>
              )}

              {/* Unanswered Requests */}
              {analysisResult.analysis?.unansweredRequests?.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-semibold flex items-center gap-2 text-red-700">
                    <AlertCircle className="h-4 w-4" />
                    –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
                  </h4>
                  <div className="space-y-2">
                    {analysisResult.analysis.unansweredRequests.map((request: string, index: number) => (
                      <div key={index} className="p-3 bg-red-50 border-l-4 border-red-400 rounded">
                        <p className="text-red-800">{request}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Identified Problems */}
              {analysisResult.analysis?.identifiedProblems?.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-semibold flex items-center gap-2 text-amber-700">
                    <AlertTriangle className="h-4 w-4" />
                    –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                  </h4>
                  <div className="space-y-2">
                    {analysisResult.analysis.identifiedProblems.map((problem: string, index: number) => (
                      <div key={index} className="p-3 bg-amber-50 border-l-4 border-amber-400 rounded">
                        <p className="text-amber-800">{problem}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Open Questions */}
              {analysisResult.analysis?.openQuestions?.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-semibold flex items-center gap-2 text-blue-700">
                    <Clock className="h-4 w-4" />
                    –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                  </h4>
                  <div className="space-y-2">
                    {analysisResult.analysis.openQuestions.map((question: string, index: number) => (
                      <div key={index} className="p-3 bg-blue-50 border-l-4 border-blue-400 rounded">
                        <p className="text-blue-800">{question}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* My Participation */}
              {analysisResult.analysis?.myParticipation && (
                <div className="p-4 bg-green-50 rounded-lg">
                  <h4 className="font-semibold text-green-900 mb-2">–ê–Ω–∞–ª–∏–∑ –º–æ–µ–≥–æ —É—á–∞—Å—Ç–∏—è</h4>
                  <p className="text-green-800">{analysisResult.analysis.myParticipation}</p>
                </div>
              )}

              {/* Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center p-4 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-gray-600">
                    {analysisResult.processedMessages || 0}
                  </div>
                  <div className="text-sm text-gray-600">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                </div>
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    {analysisResult.analysis?.priority || "medium"}
                  </div>
                  <div className="text-sm text-blue-600">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</div>
                </div>
                <div className="text-center p-4 bg-red-50 rounded-lg">
                  <div className="text-2xl font-bold text-red-600">
                    {analysisResult.analysis?.responseRequired ? "–î–∞" : "–ù–µ—Ç"}
                  </div>
                  <div className="text-sm text-red-600">–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}